0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:03,400
When I introduce lists, I said they were different from tuples

2
00:00:03,400 --> 00:00:04,920
primarily because they're mutable.

3
00:00:04,920 --> 00:00:07,450
I can change elements inside of that.

4
00:00:07,450 --> 00:00:09,430
That's a really handy tool to have,

5
00:00:09,430 --> 00:00:12,380
but it causes some really interesting potential

6
00:00:12,380 --> 00:00:13,330
for problems.

7
00:00:13,330 --> 00:00:15,250
And I want to show you where those can arise

8
00:00:15,250 --> 00:00:17,240
and how you can guard against them.

9
00:00:17,240 --> 00:00:20,900
So we're now going to talk about the idea of, not only mutation,

10
00:00:20,900 --> 00:00:24,156
but of aliasing and of cloning, topics

11
00:00:24,156 --> 00:00:26,530
that are really important, a little tricky to understand.

12
00:00:26,530 --> 00:00:28,589
And again, go look at the Python tutor

13
00:00:28,589 --> 00:00:30,880
if you want some help working through this after you've

14
00:00:30,880 --> 00:00:33,550
listened to what we're about to discuss.

15
00:00:33,550 --> 00:00:36,120
But let's think about this idea.

16
00:00:36,120 --> 00:00:38,250
Again, I said that lists are mutable.

17
00:00:38,250 --> 00:00:39,770
I can change them.

18
00:00:39,770 --> 00:00:41,770
As a consequence-- it's not surprising-- they're

19
00:00:41,770 --> 00:00:44,470
going to behave differently than immutable types.

20
00:00:44,470 --> 00:00:47,220
In particular, what is a list?

21
00:00:47,220 --> 00:00:48,920
It's an object in memory.

22
00:00:48,920 --> 00:00:50,920
And I have a variable somewhere typically that's

23
00:00:50,920 --> 00:00:52,110
going to point to that object.

24
00:00:52,110 --> 00:00:53,190
That's how I refer to it.

25
00:00:53,190 --> 00:00:54,850
That's how I say give me something

26
00:00:54,850 --> 00:00:56,856
at a particular index.

27
00:00:56,856 --> 00:00:58,230
One of the things about the list,

28
00:00:58,230 --> 00:01:01,150
though, is I could have multiple variables pointing

29
00:01:01,150 --> 00:01:02,984
to the same list.

30
00:01:02,984 --> 00:01:04,400
These are now clones, if you like,

31
00:01:04,400 --> 00:01:06,550
or copies-- actually, I'm going to say that differently.

32
00:01:06,550 --> 00:01:07,450
They're not yet copies.

33
00:01:07,450 --> 00:01:09,860
They are the same instance, but different names for them.

34
00:01:09,860 --> 00:01:13,144
So they're really just aliases for that.

35
00:01:13,144 --> 00:01:14,810
One of the things that could happen then

36
00:01:14,810 --> 00:01:18,910
is that, if I go in and change an element of a list

37
00:01:18,910 --> 00:01:22,599
under one name, it also changes under the version

38
00:01:22,599 --> 00:01:24,140
as I reference it from the other name

39
00:01:24,140 --> 00:01:26,370
because it points to the same place.

40
00:01:26,370 --> 00:01:29,700
And that has some really potential for big side effects

41
00:01:29,700 --> 00:01:32,610
that can cause interesting problems for us.

42
00:01:32,610 --> 00:01:35,040
Let me give you an analogy.

43
00:01:35,040 --> 00:01:38,070
I could have a famous person, and I could

44
00:01:38,070 --> 00:01:40,180
associate attributes with them.

45
00:01:40,180 --> 00:01:43,172
That person might also be known by many, different names.

46
00:01:43,172 --> 00:01:44,380
So they could have nicknames.

47
00:01:44,380 --> 00:01:47,840
And all of those nicknames point to the same person.

48
00:01:47,840 --> 00:01:50,130
So for some of you, here's a famous person.

49
00:01:50,130 --> 00:01:53,220
He's known as Justin Drew Bieber or as Justin Bieber

50
00:01:53,220 --> 00:01:56,430
or as-- there's a whole bunch of nicknames for this young man.

51
00:01:56,430 --> 00:01:59,620
And he also has some attributes associated with him.

52
00:01:59,620 --> 00:02:01,870
He's a singer, and he's rich.

53
00:02:01,870 --> 00:02:04,680
But if I add a new attribute to him,

54
00:02:04,680 --> 00:02:08,630
something he's done recently, all of his nicknames

55
00:02:08,630 --> 00:02:12,590
also refer to both the old attributes and the new ones.

56
00:02:12,590 --> 00:02:15,270
So that the Bieb is not just a singer and rich,

57
00:02:15,270 --> 00:02:16,550
he's also a troublemaker.

58
00:02:16,550 --> 00:02:18,350
And J. Biebs is not just a singer

59
00:02:18,350 --> 00:02:20,700
and rich, he's also a troublemaker,

60
00:02:20,700 --> 00:02:23,250
all due respect to Mr. Bieber.

61
00:02:23,250 --> 00:02:25,790
The point is that you share information

62
00:02:25,790 --> 00:02:27,880
because you have aliases or nicknames

63
00:02:27,880 --> 00:02:29,670
for the same structure.

64
00:02:29,670 --> 00:02:32,570
Same problem, same issue, same opportunity

65
00:02:32,570 --> 00:02:35,820
arises with the list.

66
00:02:35,820 --> 00:02:38,890
So let's look at a couple of examples here.

67
00:02:38,890 --> 00:02:41,704
I'm going to create a list-- and I'm

68
00:02:41,704 --> 00:02:43,360
going to show you both on my computer

69
00:02:43,360 --> 00:02:45,300
and separately-- of warm colors.

70
00:02:45,300 --> 00:02:47,070
So I'm going to say, "This is a list

71
00:02:47,070 --> 00:02:56,400
of red and yellow and orange."

72
00:02:56,400 --> 00:03:03,470
And I'm going to say, "Hot is the same as warm."

73
00:03:03,470 --> 00:03:06,670
In my global frame, I've actually created a binding,

74
00:03:06,670 --> 00:03:10,100
where warm is bound to the list whose first element is

75
00:03:10,100 --> 00:03:12,040
the string red, second element is yellow,

76
00:03:12,040 --> 00:03:13,350
third element is orange.

77
00:03:13,350 --> 00:03:15,990
Hot-- where does it point?

78
00:03:15,990 --> 00:03:19,200
Oh, to the same place because notice what I did here.

79
00:03:19,200 --> 00:03:23,950
I said, get the value of warm-- which is that arrow-- and bind

80
00:03:23,950 --> 00:03:28,230
the name hot to the same place.

81
00:03:28,230 --> 00:03:30,270
So it binds to that list.

82
00:03:30,270 --> 00:03:33,270
And that says, as a consequence, two things.

83
00:03:33,270 --> 00:03:36,280
One is if I print warm, I'm going to get that list.

84
00:03:36,280 --> 00:03:39,230
If I print hot, I'm going to get that list.

85
00:03:39,230 --> 00:03:43,570
But now, if I append something to hot, and I say,

86
00:03:43,570 --> 00:03:51,200
"At the end of hot, add in a new hot color, pink."

87
00:03:51,200 --> 00:03:52,690
What is hot?

88
00:03:52,690 --> 00:03:54,190
It's that list.

89
00:03:54,190 --> 00:03:57,380
But what is warm?

90
00:03:57,380 --> 00:03:58,980
It's the same list.

91
00:03:58,980 --> 00:04:03,080
And that's because I literally, in hot, added this element in,

92
00:04:03,080 --> 00:04:06,680
and because warm points to the exact same structure,

93
00:04:06,680 --> 00:04:07,850
it now has changed.

94
00:04:07,850 --> 00:04:09,349
It has mutated.

95
00:04:09,349 --> 00:04:10,890
And that's tricky because I might not

96
00:04:10,890 --> 00:04:14,150
have intended to change warm but only hot since they were

97
00:04:14,150 --> 00:04:15,320
pointing to the same thing.

98
00:04:15,320 --> 00:04:17,300
One was an alias for the other.

99
00:04:17,300 --> 00:04:20,000
I've had that indirect side effect that I wasn't expecting.

100
00:04:20,000 --> 00:04:22,530


101
00:04:22,530 --> 00:04:27,510
One of the consequences of this is that print is not the same

102
00:04:27,510 --> 00:04:29,090
as a quality.

103
00:04:29,090 --> 00:04:30,500
Strange statement.

104
00:04:30,500 --> 00:04:33,930
But what it says is, even if two lists print out the same thing,

105
00:04:33,930 --> 00:04:36,790
that does not mean they are the same structure.

106
00:04:36,790 --> 00:04:40,270
And I can test that by mutating one and checking.

107
00:04:40,270 --> 00:04:41,860
So again, let me type this in.

108
00:04:41,860 --> 00:04:49,590
I'm going to give cool a set of colors-- blue, green, and gray.

109
00:04:49,590 --> 00:04:52,860


110
00:04:52,860 --> 00:04:54,860
And I'm going to define chill to also

111
00:04:54,860 --> 00:04:59,390
be the set of cooler colors.

112
00:04:59,390 --> 00:05:02,150


113
00:05:02,150 --> 00:05:03,820
Notice this is different than what

114
00:05:03,820 --> 00:05:05,660
I did in the previous case.

115
00:05:05,660 --> 00:05:08,420
In the previous case, I said let hot equal warm.

116
00:05:08,420 --> 00:05:10,550
Have it be the point of the same structure.

117
00:05:10,550 --> 00:05:12,820
Here they point to different versions

118
00:05:12,820 --> 00:05:14,394
of the same set of strings.

119
00:05:14,394 --> 00:05:15,560
And you see that right here.

120
00:05:15,560 --> 00:05:17,700
Cool is that list.

121
00:05:17,700 --> 00:05:20,530
Chill is that list.

122
00:05:20,530 --> 00:05:22,100
And while the names are the same,

123
00:05:22,100 --> 00:05:23,800
they are different structures.

124
00:05:23,800 --> 00:05:27,520
And so, in fact, if I look at cool-- I'm

125
00:05:27,520 --> 00:05:30,910
going to do it more formally-- if I print out cool,

126
00:05:30,910 --> 00:05:32,260
it prints that.

127
00:05:32,260 --> 00:05:40,130
If I print out chill, looks the same, but they're not.

128
00:05:40,130 --> 00:05:42,160
And here's how I can show it.

129
00:05:42,160 --> 00:05:43,920
Because I can mutate them, I'm going

130
00:05:43,920 --> 00:05:51,290
to change the second element of chill to be blue.

131
00:05:51,290 --> 00:05:56,630
And now if I print cool, I still get blue, green, gray.

132
00:05:56,630 --> 00:06:03,510
But if I print chill, I get blue, green, blue.

133
00:06:03,510 --> 00:06:04,737
And that's important.

134
00:06:04,737 --> 00:06:06,320
Because initially it might have looked

135
00:06:06,320 --> 00:06:07,110
like they're the same thing.

136
00:06:07,110 --> 00:06:07,850
They print the same.

137
00:06:07,850 --> 00:06:08,391
They are not.

138
00:06:08,391 --> 00:06:09,994
They point to different structures.

139
00:06:09,994 --> 00:06:12,160
We have to be careful when we think about what we're

140
00:06:12,160 --> 00:06:13,534
doing to test the quality, and we

141
00:06:13,534 --> 00:06:15,990
have to be careful when we think about how we use elements

142
00:06:15,990 --> 00:06:18,150
of structures that can mutate.

143
00:06:18,150 --> 00:06:22,600
The third thing I can do is I can clone a list.

144
00:06:22,600 --> 00:06:24,090
I can make a copy of it.

145
00:06:24,090 --> 00:06:26,220
And so I can make a slight change

146
00:06:26,220 --> 00:06:31,780
in what I did earlier on, which is that I could define cool,

147
00:06:31,780 --> 00:06:37,670
again, to be this list of the cooler colors-- blue, green,

148
00:06:37,670 --> 00:06:38,260
and gray.

149
00:06:38,260 --> 00:06:40,960


150
00:06:40,960 --> 00:06:44,390
And rather than copying the same set of strings over again,

151
00:06:44,390 --> 00:06:51,045
I can simply say I want chill to be a clone of cool.

152
00:06:51,045 --> 00:06:52,420
And again, notice the difference.

153
00:06:52,420 --> 00:06:54,370
In the very first example, I said something

154
00:06:54,370 --> 00:06:55,610
like let hot equal warm.

155
00:06:55,610 --> 00:06:58,160
I could have said let chill equal cool.

156
00:06:58,160 --> 00:06:59,550
But then chill would have pointed

157
00:06:59,550 --> 00:07:01,260
to exactly the same list.

158
00:07:01,260 --> 00:07:04,309
With that colon in there, I make a copy of chill.

159
00:07:04,309 --> 00:07:05,600
And you can see that over here.

160
00:07:05,600 --> 00:07:08,240
I've got cool pointing to one version.

161
00:07:08,240 --> 00:07:11,930
I've got chill pointing to a second version.

162
00:07:11,930 --> 00:07:16,830
And that now says, for example, if I mutate chill,

163
00:07:16,830 --> 00:07:20,523
I append to it the color black.

164
00:07:20,523 --> 00:07:24,390


165
00:07:24,390 --> 00:07:25,630
And I print out chill.

166
00:07:25,630 --> 00:07:29,170


167
00:07:29,170 --> 00:07:33,840
Black is there, but cool has not changed.

168
00:07:33,840 --> 00:07:35,510
And that makes sense because cool

169
00:07:35,510 --> 00:07:37,460
is pointing to this structure.

170
00:07:37,460 --> 00:07:41,650
I mutated or changed that structure.

171
00:07:41,650 --> 00:07:43,650
Cloning lists is really useful when

172
00:07:43,650 --> 00:07:46,220
I want to do something with a list that involves mutation,

173
00:07:46,220 --> 00:07:49,340
but I don't want to, in fact, change the original list.

174
00:07:49,340 --> 00:07:51,480
I can make a copy very quickly and use it.

175
00:07:51,480 --> 00:07:53,313
And I'm going to show you an example of that

176
00:07:53,313 --> 00:07:54,129
in just a second.

177
00:07:54,129 --> 00:07:56,420
But we've seen aliasing and some of the effects of that

178
00:07:56,420 --> 00:07:57,760
in terms of side effects.

179
00:07:57,760 --> 00:07:59,900
We've seen cloning, and we've seen the fact

180
00:07:59,900 --> 00:08:02,130
that because lists are mutable, I have to be careful

181
00:08:02,130 --> 00:08:04,470
when I want to ask about are two things the same,

182
00:08:04,470 --> 00:08:06,319
even if they print the same way.

183
00:08:06,319 --> 00:08:08,110
We've already talked about this, but I want

184
00:08:08,110 --> 00:08:09,860
to give you one more example.

185
00:08:09,860 --> 00:08:11,880
I can sort a list, and I suggest that there

186
00:08:11,880 --> 00:08:13,990
are two ways to do the sort.

187
00:08:13,990 --> 00:08:16,950
I could use Sort, or I could use Sorted.

188
00:08:16,950 --> 00:08:20,320
Sort mutates the list, changes the actual structure

189
00:08:20,320 --> 00:08:22,160
but doesn't return anything.

190
00:08:22,160 --> 00:08:24,970
Sorted doesn't mutate the list, essentially makes

191
00:08:24,970 --> 00:08:28,310
a new version of the list in sorted order and returns that.

192
00:08:28,310 --> 00:08:31,650
So I'm going to have to reassign that result to a variable.

193
00:08:31,650 --> 00:08:33,240
And I've shown you an example here.

194
00:08:33,240 --> 00:08:36,260
I started off with warm as a sequence of three colors.

195
00:08:36,260 --> 00:08:38,340
I called Sort on it.

196
00:08:38,340 --> 00:08:40,659
That's the method associated with warm.

197
00:08:40,659 --> 00:08:42,772
And it will literally change the order of them.

198
00:08:42,772 --> 00:08:44,230
And in fact, you can see over here,

199
00:08:44,230 --> 00:08:46,720
after I've done that, warm is now

200
00:08:46,720 --> 00:08:48,900
in a different order from where I started.

201
00:08:48,900 --> 00:08:50,849
And so I have a different structure to that.

202
00:08:50,849 --> 00:08:53,390
And in fact, warm now points to something different than what

203
00:08:53,390 --> 00:08:56,000
I really originally began with.

204
00:08:56,000 --> 00:09:01,580
Sorted warm has no value because Sort does not return anything.

205
00:09:01,580 --> 00:09:06,320
If on the other hand, I set up cool as this list structure,

206
00:09:06,320 --> 00:09:09,600
and I call Sorted on it-- which I do right there--

207
00:09:09,600 --> 00:09:12,750
I'm going to return that to a variable name

208
00:09:12,750 --> 00:09:15,030
because Sorted does not mutate the list.

209
00:09:15,030 --> 00:09:17,260
Cool will not change in this case.

210
00:09:17,260 --> 00:09:20,220
But what it will return is a new sorted list,

211
00:09:20,220 --> 00:09:24,176
and I've now created a binding that points to that structure.

212
00:09:24,176 --> 00:09:25,550
I'm sure somewhere along the line

213
00:09:25,550 --> 00:09:27,883
you're going to use the wrong version of Sort of Sorted.

214
00:09:27,883 --> 00:09:28,790
I do regularly.

215
00:09:28,790 --> 00:09:29,770
It's OK.

216
00:09:29,770 --> 00:09:31,980
But what you should see here is that if I

217
00:09:31,980 --> 00:09:34,830
don't mind the mutation of the list, in fact, if I want it,

218
00:09:34,830 --> 00:09:37,970
I can change it in place, using sort.

219
00:09:37,970 --> 00:09:39,640
If I don't want to mutate the list,

220
00:09:39,640 --> 00:09:45,880
I use Sorted, two useful tools to have associated with lists.

221
00:09:45,880 --> 00:09:48,680
I can of course have, as I've already said,

222
00:09:48,680 --> 00:09:50,730
arbitrary structures inside of lists.

223
00:09:50,730 --> 00:09:53,300
So I could have nested lists, lists of lists.

224
00:09:53,300 --> 00:09:55,467
They might be even lists of lists of lists.

225
00:09:55,467 --> 00:09:57,050
One of the things that can happen here

226
00:09:57,050 --> 00:09:59,380
is that I can still get side effects that

227
00:09:59,380 --> 00:10:01,540
can occur after mutation.

228
00:10:01,540 --> 00:10:03,590
And so let me show you an example of this.

229
00:10:03,590 --> 00:10:06,580
I've defined warm to be the list of yellow and orange.

230
00:10:06,580 --> 00:10:08,790
I've defined hot to be the list red.

231
00:10:08,790 --> 00:10:10,020
So I've got warm.

232
00:10:10,020 --> 00:10:11,000
I've got hot.

233
00:10:11,000 --> 00:10:15,010
Then I'm going to set up bright colors to be a list of warm.

234
00:10:15,010 --> 00:10:18,164
And there's the formation of it with the square braces.

235
00:10:18,164 --> 00:10:19,580
And in fact, if I do it over here,

236
00:10:19,580 --> 00:10:27,800
I'm going to set up warm to be the list of yellow and orange.

237
00:10:27,800 --> 00:10:33,230
I said hot would be the list of red.

238
00:10:33,230 --> 00:10:38,080
And bright colors is just a list of warm,

239
00:10:38,080 --> 00:10:41,140
which is itself a list.

240
00:10:41,140 --> 00:10:42,580
So there's the value of warm.

241
00:10:42,580 --> 00:10:43,850
There's the value of hot.

242
00:10:43,850 --> 00:10:45,190
And let's look at bright colors.

243
00:10:45,190 --> 00:10:47,720


244
00:10:47,720 --> 00:10:49,210
Oh, funky.

245
00:10:49,210 --> 00:10:50,460
Two square braces.

246
00:10:50,460 --> 00:10:52,899
The outer square braces say it's a list.

247
00:10:52,899 --> 00:10:54,190
There's only one element in it.

248
00:10:54,190 --> 00:10:56,070
And that element is itself a list that

249
00:10:56,070 --> 00:10:59,180
has two things inside of it.

250
00:10:59,180 --> 00:11:02,560
Now let's add something to bright colors.

251
00:11:02,560 --> 00:11:08,650
I'm going to say, to bright colors, append at the end hot.

252
00:11:08,650 --> 00:11:10,040
And I know what hot is it.

253
00:11:10,040 --> 00:11:11,820
It is itself a list.

254
00:11:11,820 --> 00:11:14,360
I created that earlier on.

255
00:11:14,360 --> 00:11:21,420
And if I print out bright colors-- oh, very nice--

256
00:11:21,420 --> 00:11:23,290
the outer square braces say it's a list.

257
00:11:23,290 --> 00:11:25,780
And notice, I've got two elements inside of this.

258
00:11:25,780 --> 00:11:28,840
The first one is a list that happens to be of two elements.

259
00:11:28,840 --> 00:11:32,220
The second one is a list that happens to be of one element.

260
00:11:32,220 --> 00:11:34,180
And you can see that here because bright colors

261
00:11:34,180 --> 00:11:36,810
points to a list, each element of which itself

262
00:11:36,810 --> 00:11:39,590
points to a list.

263
00:11:39,590 --> 00:11:44,730
Now let's append, to hot, the color pink.

264
00:11:44,730 --> 00:11:48,970


265
00:11:48,970 --> 00:11:53,150
And if I do that-- I've already added it over here.

266
00:11:53,150 --> 00:11:57,400
Let's see what happens if I print out hot.

267
00:11:57,400 --> 00:12:01,290
Not surprisingly, it's a list of red and pink.

268
00:12:01,290 --> 00:12:03,860
But notice the strange effect.

269
00:12:03,860 --> 00:12:07,780
I didn't do anything here that directly used bright colors.

270
00:12:07,780 --> 00:12:09,610
I didn't say do something to bright colors.

271
00:12:09,610 --> 00:12:15,590
But if I print out bright colors, it's changed.

272
00:12:15,590 --> 00:12:18,940
And it's changed, again, because of that aliasing or side

273
00:12:18,940 --> 00:12:19,510
effect.

274
00:12:19,510 --> 00:12:22,080
Because bright colors points to something,

275
00:12:22,080 --> 00:12:24,640
one of whose elements points to a list,

276
00:12:24,640 --> 00:12:28,710
when I change hot-- which I did-- I've also indirectly

277
00:12:28,710 --> 00:12:30,254
changed bright colors.

278
00:12:30,254 --> 00:12:31,920
And you can imagine this is occasionally

279
00:12:31,920 --> 00:12:33,711
going to cause you some difficulties if you

280
00:12:33,711 --> 00:12:35,660
change something you weren't expecting.

281
00:12:35,660 --> 00:12:38,650
We'll see that having aliases can be valuable,

282
00:12:38,650 --> 00:12:41,400
but we've already seen it could cause some side effects that I

283
00:12:41,400 --> 00:12:43,790
wasn't expecting and could lead to computations

284
00:12:43,790 --> 00:12:46,810
that aren't what I wanted.

285
00:12:46,810 --> 00:12:53,750
Finally, if I print out the whole thing of hot plus warm,

286
00:12:53,750 --> 00:12:57,350
I get, in this case, the nice concatenation of them.

287
00:12:57,350 --> 00:12:59,210
But again, I haven't changed anything inside

288
00:12:59,210 --> 00:13:00,160
of this structure.

289
00:13:00,160 --> 00:13:02,836
And I remind you that's what we wanted, in some cases,

290
00:13:02,836 --> 00:13:04,210
use concatenation because we want

291
00:13:04,210 --> 00:13:08,180
to make a version of things that are glued together

292
00:13:08,180 --> 00:13:11,857
rather than changing things in place.

293
00:13:11,857 --> 00:13:12,940
And just to show you that.

294
00:13:12,940 --> 00:13:16,660
If I go back and print hot, nothing has changed.

295
00:13:16,660 --> 00:13:20,510
It's still red and pink.

296
00:13:20,510 --> 00:13:23,150
One last topic about mutation, especially as

297
00:13:23,150 --> 00:13:26,110
you come around to doing things around iteration.

298
00:13:26,110 --> 00:13:27,930
If I'm going to iterate over a list,

299
00:13:27,930 --> 00:13:33,110
I really want to avoid mutating that list as I iterate over it.

300
00:13:33,110 --> 00:13:34,820
And here's a little piece of code

301
00:13:34,820 --> 00:13:37,020
this intended to remove duplicates from two lists.

302
00:13:37,020 --> 00:13:38,720
The idea is if I've got two lists,

303
00:13:38,720 --> 00:13:41,002
I'd like to loop through the first list

304
00:13:41,002 --> 00:13:42,710
and then go over the second list and say,

305
00:13:42,710 --> 00:13:44,230
if I've already got a copy of that,

306
00:13:44,230 --> 00:13:46,750
I'm going to remove it from the first list.

307
00:13:46,750 --> 00:13:48,970
And I want to show you an example of this.

308
00:13:48,970 --> 00:13:52,570
I'm going to just type in very quickly,

309
00:13:52,570 --> 00:13:58,740
"Remove dupe of L1 and L2."

310
00:13:58,740 --> 00:14:05,240
And it says, "4E and L1."

311
00:14:05,240 --> 00:14:11,730
I'm going to say, "If it's already in L2,

312
00:14:11,730 --> 00:14:20,370
I'm going to remove it from L1."

313
00:14:20,370 --> 00:14:22,050
So there's a definition list.

314
00:14:22,050 --> 00:14:24,320
As we've got on the slide, give it two examples.

315
00:14:24,320 --> 00:14:27,880
I got one, two, three, four for L1,

316
00:14:27,880 --> 00:14:34,490
and I have one, two, five, six, for L2.

317
00:14:34,490 --> 00:14:38,150


318
00:14:38,150 --> 00:14:43,950
And I do Remove Dupes of L1 from L2.

319
00:14:43,950 --> 00:14:46,470
And I look at L1.

320
00:14:46,470 --> 00:14:49,180
And it's two, three, four.

321
00:14:49,180 --> 00:14:50,850
Wait a minute.

322
00:14:50,850 --> 00:14:52,890
Why didn't I remove two?

323
00:14:52,890 --> 00:14:56,930
Two also appears in L2 as well as in L1.

324
00:14:56,930 --> 00:14:59,810
I should have removed it from L1, and I didn't.

325
00:14:59,810 --> 00:15:01,210
Why?

326
00:15:01,210 --> 00:15:03,560
And the answer is that Python, because it's

327
00:15:03,560 --> 00:15:06,440
going over an iterable, uses an internal counter

328
00:15:06,440 --> 00:15:09,280
to keep track of where it is inside the loop, what

329
00:15:09,280 --> 00:15:12,039
element of the list is it going to be getting to next.

330
00:15:12,039 --> 00:15:13,580
It's basically saying, how many times

331
00:15:13,580 --> 00:15:15,260
have I gone through this loop.

332
00:15:15,260 --> 00:15:20,130
When I mutate, which Remove does, when I mutate the list,

333
00:15:20,130 --> 00:15:22,430
it changes the list, and it actually

334
00:15:22,430 --> 00:15:25,354
caused Python to never see the element two.

335
00:15:25,354 --> 00:15:27,270
Because it had gone through it the first time.

336
00:15:27,270 --> 00:15:28,020
I've removed one.

337
00:15:28,020 --> 00:15:28,710
I've mutated.

338
00:15:28,710 --> 00:15:30,990
It's thinking, I'm going to look at the next element,

339
00:15:30,990 --> 00:15:32,580
but I've changed the size of the list.

340
00:15:32,580 --> 00:15:34,470
And the next element is no longer two.

341
00:15:34,470 --> 00:15:36,030
It's now three.

342
00:15:36,030 --> 00:15:39,160
So if I'm going to want to do something like this,

343
00:15:39,160 --> 00:15:41,060
I have a tool.

344
00:15:41,060 --> 00:15:45,490
I can't do that, but what I can do is make a copy.

345
00:15:45,490 --> 00:15:49,470
And by making a copy, by cloning the list first, now

346
00:15:49,470 --> 00:15:52,570
when I'm mutating L1, I've still got something

347
00:15:52,570 --> 00:15:54,410
that I'm iterating over that hasn't

348
00:15:54,410 --> 00:15:57,192
changed because it's pointing to a different structure.

349
00:15:57,192 --> 00:15:58,650
Again, a place where you want to be

350
00:15:58,650 --> 00:16:01,140
careful about accidentally causing problems

351
00:16:01,140 --> 00:16:03,190
because of the mutation.

352
00:16:03,190 --> 00:16:06,260
Just like in biology, mutation is not always a good thing.

353
00:16:06,260 --> 00:16:08,260
Same thing in computer science or in Python.

354
00:16:08,260 --> 00:16:11,320
It can be useful, but we ought to be careful about the side

355
00:16:11,320 --> 00:16:13,720
effects that show up.

